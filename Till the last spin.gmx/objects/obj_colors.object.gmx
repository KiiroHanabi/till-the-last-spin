<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>palette = instance_create(0,0,obj_palette_denial);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw colored subtractive rectangles on the four arrow zones

draw_set_blend_mode( bm_subtract );

// The subtract blend mode draws the opposite colors so we have to use the opposite one's
// to retreive the original one's.

/*inv_blue = $00c8c8;
inv_green = $c800c8;
inv_yellow = $c80000;
inv_red = $c8c800;
*/

for(var i = 0; i &lt; 4; i++) {
    draw_set_colour(palette.color_opposite[i]);
    draw_rectangle(528+(96*i),0,624+(96*i),540,false);
}


/*draw_set_colour(inv_green);
draw_rectangle(624,0,720,540,false);

draw_set_colour(inv_yellow);
draw_rectangle(720,0,816,540,false);

draw_set_colour(inv_red);
draw_rectangle(816,0,912,540,false);*/

draw_set_blend_mode( bm_normal );
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw red fog on the screen depending on the miss

/*alpha = 0;

switch(global.miss%3) {
    case 1 : {
        alpha = 0.15;
        break;
    }
    case 2 : {
        alpha = 0.30;
        break;
    }
    case 0 : {
        if(global.miss != 0) { 
        alpha = 0.45;
        } else alpha = 0;
        break;
    }
}

draw_set_alpha(alpha);
draw_set_color(c_red);
draw_rectangle(0,0,960,540,false);
draw_set_alpha(1);*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw red cracks on the screen depending on the miss

var index = 0;

switch(global.miss%3) {
    case 1 : {
        index = 1;
        break;
    }
    case 2 : {
        index = 2;
        break;
    }
    case 0 : {
        if(global.miss != 0) { 
        index = 3;
        } else index = 0;
        break;
    }
}

draw_sprite(spr_cracks,index,0,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
