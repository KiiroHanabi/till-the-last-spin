<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// initialize textbox

message[0] = "This is a test.";
message[1] = "I need time @_@. This line needs to be longer so I can check how it is working. Is that enough now ? Or maybe now ??";
message[2] = "Gimme more text !!!"

//Text Position
tX = 48;
tY = 444;

//Characters settings
tb_color = c_white;
tb_font = fnt_kongtext;

message_current = 0;
timer = 0;
cutoff = 0;

t = 0;
increment = 1;

charWidth = 13;
lineEnd = 34;
delay = 2;

voice = snd_mep_madam;

done = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// TODO lancer la suite de la cin√©matique, la prochaine textbox, ou autre

/*text[0] = "meh";
text[1] = "moh";

init_textbox_font(70, 32, 200, fnt_kongtext, c_yellow, text);*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// destroy the instance if the end of the messages have been achieved

if(done) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw the box

// draw a white rectangle to make the border
draw_set_colour(c_white);
draw_rectangle(tX-22, tY-18, (tX-13)+(lineEnd*12)+67, (tY-9)+(4*20)+19, false);

// draw a black rectangle to the size of the line (lineEnd+32) and the number of lines (4*20)
draw_set_colour(c_black);
draw_rectangle(tX-16, tY-12, (tX-16)+(lineEnd*12)+64, (tY-12)+(4*20)+16, false);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw the text

draw_set_font(tb_font);
draw_set_blend_mode(bm_normal);
draw_set_colour(tb_color);

//How many message are in the array
message_end = array_length_1d(message);

if (message_end &gt; 0) {

    //Variables
    var line = 0;
    var space = 0;
    var i = 1;
    
    //Typewriter
    if(cutoff &lt; string_length(message[message_current])) {
        if(timer &gt;= delay) {
            cutoff++;
            timer = 0;
            var p = random_range(-0.2,0.2);
            var v = audio_play_sound(voice, 10, false);
            audio_sound_pitch(v,1+p);
            
        } else timer ++;
    }
 
    //Next Message
    if (keyboard_check_pressed(vk_space) || mouse_check_button_pressed(mb_any)) {
    
        if(cutoff &lt; string_length(message[message_current])) cutoff = string_length(message[message_current]);

        //If we still have some more messages, go to the next one
        else if (message_current &lt; message_end-1 ) {
            message_current++;
            cutoff = 0;
        } else done = true;

    }
    
    //Draw Text
    while(i &lt;= string_length(message[message_current]) &amp;&amp; i &lt;= cutoff) {
        //go to the next line
        var length = 0;
        while (string_char_at(message[message_current], i) != " " &amp;&amp; i &lt;= string_length(message[message_current])) {
            i++;
            length++;
        }
        
        if (space+length &gt; lineEnd) {
            space = 0;
            line++;
        }
        i -= length;
        
        draw_text(tX+(space*charWidth), tY+(20*line), string_char_at(message[message_current], i));
        
        space++;
        i++;
    }
    
       
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
